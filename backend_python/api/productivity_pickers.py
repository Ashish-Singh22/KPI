# worker_picker_kpi.py
import pandas as pd

def process_picker_file(file_stream):
    try:
        # -*- coding: utf-8 -*-
        # """Productivity_pickers.ipynb

        # Automatically generated by Colab.

        # Original file is located at
        #     https://colab.research.google.com/drive/1ewjWW-yL9TL95J0E-e4wWmrUaCpXmwxg
        # """

        # # Step 1: Upload the Excel file
        # from google.colab import files
        # uploaded = files.upload()
        # # Step 2: Read the Excel file using pandas
        # import pandas as pd

        # # Get the uploaded file name
        # filename = list(uploaded.keys())[0]

        # # Load Excel file into a DataFrame
        picker_data = pd.read_excel(file_stream)
        picker_data.head()  # Show the first few rows

        # print(picker_data['Dispatched Time'].dtypes)

        my_date = picker_data["Loaded Time"][0].date()

        import datetime

        # Function to determine shift number from time
        def get_shift(time_val):
            if pd.isnull(time_val):
                return None
            if datetime.time(6, 0, 0) <= time_val <= datetime.time(13, 59, 59):
                return 1
            elif datetime.time(14, 0, 0) <= time_val <= datetime.time(21, 59, 59):
                return 2
            elif datetime.time(22, 0, 0) <= time_val <= datetime.time(23, 59, 59):
                return 3
            else:
                return 3  # Anything from 00:00:00 to 05:59:59 as Shift 3 (midnight hours)

        # Apply to the DataFrame
        picker_data['Shift'] = (pd.to_datetime(picker_data["Loaded Time"], errors='coerce').dt.time).apply(get_shift)

        # Show result
        picker_data

        per_dict = {}

        for index,row in picker_data.iterrows():
            if row["Shift"] in per_dict:
                if row["Employee"] in per_dict[row["Shift"]]:
                    per_dict[row["Shift"]][row["Employee"]][0][0] += 1
                    per_dict[row["Shift"]][row["Employee"]][0][1] += row["Quantity"]
                    per_dict[row["Shift"]][row["Employee"]][1].append(("dispatch",row["Dispatched Time"]))
                    per_dict[row["Shift"]][row["Employee"]][1].append(("load",row["Loaded Time"]))
                    per_dict[row["Shift"]][row["Employee"]][1].append(("drop",row["Drop Off Time"]))
                else:
                    per_dict[row["Shift"]][row["Employee"]] = [[1,row["Quantity"]],[("dispatch",row["Dispatched Time"]),("load",row["Loaded Time"]),("drop",row["Drop Off Time"])]]
            else:
                per_dict[row["Shift"]] = {row["Employee"] : [[1,row["Quantity"]],[("dispatch",row["Dispatched Time"]),("load",row["Loaded Time"]),("drop",row["Drop Off Time"])]] }

        per_dict

        for shift, people in per_dict.items():
            for person, data in people.items():
                # data[1] is the list of events
                data[1] = sorted(data[1], key=lambda x: x[1])

        # per_dict[1]

        # per_dict[1]['Bagal, Prashant']

        from collections import deque
        from datetime import datetime, time

        final_person = {}  # { shift: { person: { "lines":..., "quantity":..., "fr_t":..., "l_t":..., "d_t":... } } }

        for shift in per_dict:
            # Define the shift start time based on the shift number
            if shift == 1:
                st_t = datetime.combine(my_date, time(6, 0, 0))
                e_t = datetime.combine(my_date, time(13, 59, 59))
            elif shift == 2:
                st_t = datetime.combine(my_date, time(14, 0, 0))
                e_t = datetime.combine(my_date, time(21, 59, 59))
            else:
                st_t = datetime.combine(my_date, time(22, 0, 0))
                e_t = datetime.combine(my_date, time(23, 59, 59))

            final_person[shift] = {}

            for person in per_dict[shift]:
                final_person[shift][person] = {}
                final_person[shift][person]["lines"] = per_dict[shift][person][0][0]
                final_person[shift][person]["quantity"] = per_dict[shift][person][0][1]

                fr_t = l_t = d_t = 0
                l_d_t = None
                q = deque()  # Reset the queue per person

                for event_type, timestamp in per_dict[shift][person][1]:
                    if event_type == "dispatch":
                        if l_d_t is None:
                            if not q:
                                fr_t += (timestamp - st_t).total_seconds()
                                q.append(timestamp)
                            else:
                                q.append(timestamp)
                        else:
                            if not q:
                                fr_t += (timestamp - l_d_t).total_seconds()
                                l_d_t = timestamp
                                q.append(timestamp)
                            else:
                                q.append(timestamp)
                    elif event_type == "load":
                        if l_d_t is None:
                            if not q:
                                l_t += (timestamp - st_t).total_seconds()
                            else:
                                l_t += (timestamp - q[0]).total_seconds()
                        else:
                            l_t += (timestamp - l_d_t).total_seconds()
                        l_d_t = timestamp
                    elif event_type == "drop":
                        if l_d_t is None:
                            if not q:
                                d_t += (timestamp - st_t).total_seconds()
                            else:
                                d_t += (timestamp - q[0]).total_seconds()
                                q.pop()
                        else:
                            d_t += (timestamp - l_d_t).total_seconds()
                            q.pop()
                        l_d_t = timestamp

                # Convert to hours
                final_person[shift][person]["fr_t"] = fr_t / 3600
                final_person[shift][person]["l_t"] = l_t / 3600
                final_person[shift][person]["d_t"] = d_t / 3600

                total_time_hours = final_person[shift][person]["fr_t"] + final_person[shift][person]["l_t"] + final_person[shift][person]["d_t"]
                if total_time_hours < 8:
                    remaining = 8 - total_time_hours
                    final_person[shift][person]["fr_t"] += remaining

        final_person

        final_data = []
        for shift, data in final_person.items():
            entry = {
                "date": my_date.strftime("%Y-%m-%d"),  # Convert date to string
                "shift": shift,
                "data": data  # This is the inner dict for all persons in that shift
            }
            final_data.append(entry)

        final_data
        return {'success': True, 'data': final_data}
    except Exception as e:
        return {'success': False, 'message': str(e)}